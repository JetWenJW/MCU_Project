#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "semphr.h"

#include "fsl_device_registers.h"
#include "fsl_debug_console.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "board.h"

#include "fsl_common.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
#define SW_TIMER_PERIOD_MS (3000 / portTICK_PERIOD_MS)
//SemaphoreHandle_t xSemaphore = NULL;
int ledSignal = 0;
/*******************************************************************************
 * Prototypes
 ******************************************************************************/
void white_task(void *pvParameters);
void SwTimerCallback(TimerHandle_t xTimer);
/*******************************************************************************
 * Code
 ******************************************************************************/

int main(void)
{

    TimerHandle_t SwTimerHandle = NULL;
    /* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitDebugConsole();

    /* Create a binary semaphore. */

    /* Create the software timer. */
    SwTimerHandle = xTimerCreate("SwTimer",          /* Text name. */
    							 3000, 				 /* Timer period. */
                                 pdTRUE,             /* Enable auto reload. */
                                 0,                  /* ID is not used. */
                                 SwTimerCallback);   /* The callback function. */
    /* Start timer. */
    xTimerStart(SwTimerHandle, 0);

    xTaskCreate(white_task, 	"white", 	configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    /* Start scheduling */
    vTaskStartScheduler();
    for (;;);
}

void white_task (void *pvParameters)
{
    while (1)
    {
        vTaskDelay(pdMS_TO_TICKS(1000));
        GPIO_PortToggle(GPIOE, 1 << 25); // LED Blue ON
        GPIO_PortToggle(GPIOD, 1 << 7); // LED Green ON
        GPIO_PortToggle(GPIOD, 1 << 1);  /* LED Red ON */
        vTaskDelay(pdMS_TO_TICKS(1000));
        PRINTF("R + G + B = white \r\n");
    }
}

/*!
 * @brief Software timer callback.
 */
void SwTimerCallback(TimerHandle_t xTimer)
{
	//something you wanna execute code//
	white_task(NULL);

}
